@page
@using Microsoft.Extensions.Configuration
@inject IConfiguration Config
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<link rel="stylesheet" href="/css/Profile.css" />

<div class="card" id="profileCard">
    <h2>Профіль користувача</h2>

    <div class="input-group">
        <label>Ім'я:</label>
        <input id="name" type="text" />
    </div>

    <div class="input-group">
        <label>Інклюзивність:</label>
        <select id="loi"></select>
    </div>

    <div class="input-group">
        <label>Email:</label>
        <input id="email" type="text" disabled />
    </div>

    <div class="input-group">
        <button class="btn btn-secondary" onclick="togglePassword()">Змінити пароль</button>
    </div>

    <div class="input-group" id="passwordGroup" style="display:none;">
        <label>Новий пароль:</label>
        <input id="password" type="password" placeholder="Введіть новий пароль" />
    </div>

    <button class="btn" id="saveBtn">Зберегти зміни</button>

    <a class="btn" id="addPointBtn" style="display:none;" href="/Admin/AddPoint">Додати точку</a>
    <a class="btn btn-secondary" id="requestsBtn" style="display:none;" href="/Admin/Requests">Модерація точок</a>
</div>

<div class="card">
    <h2>Збережені точки</h2>
    <ul id="savedPoints"></ul>
</div>

@section Scripts {
    <script>
        const token = localStorage.getItem('token');
        if (!token) location.href = '/Auth/Login';

        const inclusives = [
            "Вади зору(сліпота, слабозорість)",
            "Вади слуху(глухота, слабочуючість)",
            "Порушення опорно - рухового апарату(інвалідність колісного типу, милиці)",
            "Люди з протезами або ортопедичними пристроями",
            "Порушення координації рухів"
        ];

        const loiSelect = document.getElementById('loi');
        inclusives.forEach(i => loiSelect.innerHTML += `<option value="${i}">${i}</option>`);

        let userData;

        async function loadProfile() {
            const res = await fetch('/api/user/me', { headers: { Authorization: 'Bearer ' + token } });

            if (!res.ok) {
                alert('Помилка завантаження профілю');
                location.href = '/Auth/Login';
                return;
            }

            userData = await res.json();

            document.getElementById('name').value = userData.name;
            document.getElementById('email').value = userData.email;
            loiSelect.value = userData.inclusivness[0] ?? inclusives[0];

            if (userData.role === 'admin') {
                document.getElementById('addPointBtn').style.display = 'inline-block';
                document.getElementById('requestsBtn').style.display = 'inline-block';
            }

            await loadPoints();
        }

        async function loadPoints() {
            const points = userData.points ?? [];
            const list = document.getElementById('savedPoints');
            if (points.length === 0) {
                list.innerHTML = '<li>Збережених точок немає</li>';
                return;
            }
            list.innerHTML = '';
            for (const id of points) {
                const res = await fetch('/api/point/' + id);
                if (!res.ok) continue;
                const p = await res.json();
                list.innerHTML += `<li>${p.address}</li>`;
            }
        }

        function togglePassword() {
            const block = document.getElementById('passwordGroup');
            block.style.display = block.style.display === 'none' ? 'block' : 'none';
        }

        loadProfile();

        document.getElementById('saveBtn').onclick = async () => {
            const password = document.getElementById('password').value.trim();

            const body = {
                id: userData.id,
                name: document.getElementById('name').value.trim(),
                role: loiSelect.value ? 'inclusive' : userData.role,
                email: userData.email,
                points: userData.points ?? [],
                inclusivness: [loiSelect.value],
                hashedPassword: password ? password : userData.hashedPassword
            };

            if (!body.name) {
                alert('Ім\'я не може бути порожнім.');
                return;
            }

            const res = await fetch('/api/user/me', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token
                },
                body: JSON.stringify(body)
            });

            if (res.ok) {
                alert('Збережено успішно!');
                if (password) location.reload();
            } else {
                const errorText = await res.text();
                alert('Помилка: ' + res.status + '\n' + errorText);
            }
        };
    </script>
}
