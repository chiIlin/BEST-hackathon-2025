@page
@model best_hackathon_2025.Pages.IndexModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Головна";
}

<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <title>CHILLGO - Інтерактивна карта</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="~/css/chillgo-style.css" />
    <style>
        body.light-theme {
            /* Додаткові стилі для світлої теми, якщо потрібно */
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Header/Navigation Bar -->
        <header class="top-navbar">
            <div class="logo-container">
                <div class="logo-grid">
                    <div></div><div></div><div></div>
                    <div></div><div></div><div></div>
                    <div></div><div></div><div></div>
                </div>
                <span class="brand-name">CHILLGO</span>
            </div>
            
            <div class="search-container">
                <div class="search-box">
                    <i class="bi bi-search search-icon"></i>
                    <input type="text" id="searchInput" placeholder="Пошук" />
                </div>
            </div>
            
            <div class="nav-actions">
                
                <button id="themeToggle" class="nav-icon-button theme-toggle">
                    <i class="bi bi-moon-fill"></i>
                </button>
                <div class="auth-links">
                    <a href="/Auth/Login" class="nav-link">Увійти</a>
                    <a href="/Auth/Register" class="nav-link register-link">Реєстрація</a>
                </div>
            </div>
        </header>

        <!-- Main Content with Sidebar -->
        <div class="content-wrapper">
            <!-- Sidebar -->
            <aside class="sidebar" id="sidebar">
                <div class="info-section">
                    <h2 class="section-header">Інформація:</h2>
                    <div class="info-content">
                        <p class="info-item"><strong>Назва місця, вулиці</strong></p>
                        <p class="info-item"><strong>LOI:</strong> 0</p>
                        <p class="info-item"><strong>Категорії:</strong> -</p>
                        <p class="info-item"><strong>Перевірено:</strong> Ні</p>
                    </div>
                </div>

                <div class="reviews-section">
                    <h2 class="section-header reviews-header">Відгуки:</h2>
                    <div id="reviews" class="reviews-container">
                        <div class="review-placeholder"></div>
                        <div class="review-placeholder"></div>
                        <div class="review-placeholder"></div>
                        <div class="review-placeholder"></div>
                    </div>
                </div>
                
                <div class="location-indicator">
                    <i class="bi bi-geo-alt-fill location-icon"></i>
                    <span class="location-name">Львів</span>
                </div>
            </aside>

            <!-- Map Area -->
            <main class="main-content">
                <div id="map"></div>
                <div class="map-controls">
                    <button class="zoom-button zoom-in">+</button>
                    <button class="zoom-button zoom-out">−</button>
                </div>
                <div class="map-attribution">
                    <img src="https://www.google.com/images/branding/googlelogo/1x/googlelogo_white_60x24dp.png" alt="Google" class="google-logo">
                </div>
            </main>
        </div>
    </div>

    @section Scripts {
        <script>
            let map, userToken = localStorage.getItem('token');
            let currentTheme = localStorage.getItem('theme') || 'dark'; // За замовчуванням темна тема

            async function initMap() {
                // Завантажуємо стиль карти в залежності від поточної теми
                const styleUrl = currentTheme === 'dark' 
                    ? '/styles/map-style-dark.json' 
                    : '/styles/map-style-light.json';
                const style = await fetch(styleUrl).then(res => res.json());
                
                const center = { lat: 49.8397, lng: 24.0297 };
                map = new google.maps.Map(document.getElementById("map"), {
                    zoom: 12,
                    center,
                    styles: style,
                    disableDefaultUI: true,
                    zoomControl: false,
                    mapTypeControl: false,
                    streetViewControl: false,
                    fullscreenControl: false
                });
                
                // Custom zoom controls
                document.querySelector('.zoom-in').addEventListener('click', () => {
                    map.setZoom(map.getZoom() + 1);
                });
                
                document.querySelector('.zoom-out').addEventListener('click', () => {
                    map.setZoom(map.getZoom() - 1);
                });
                
                // Load points and add markers
                const points = await (await fetch('/api/point')).json();
                points.forEach(addMarker);
                
                // Add sample markers shown in the image
                addCustomMarker({ lat: 49.842, lng: 24.031 }, 'red'); // Opera marker
                addCustomMarker({ lat: 49.845, lng: 24.025 }, 'blue'); // Random blue marker
                addCustomMarker({ lat: 49.865, lng: 24.035 }, 'blue'); // SPARTAK
                addCustomMarker({ lat: 49.855, lng: 24.072 }, 'blue'); // Epicenter
                addCustomMarker({ lat: 49.835, lng: 24.015 }, 'blue'); // Skrynya
                addCustomMarker({ lat: 49.820, lng: 24.028 }, 'blue'); // Another blue marker
                addCustomMarker({ lat: 49.815, lng: 24.060 }, 'blue'); // Another blue marker
                addCustomMarker({ lat: 49.825, lng: 24.080 }, 'blue'); // Another blue marker
                addCustomMarker({ lat: 49.805, lng: 24.070 }, 'blue'); // Another blue marker
                addCustomMarker({ lat: 49.800, lng: 24.090 }, 'green'); // Arena Lviv
                
                setupSearch();
                setupThemeToggle(); // Додаємо налаштування перемикача теми
                
                // Встановлюємо правильний клас для body при завантаженні
                document.body.classList.toggle('light-theme', currentTheme === 'light');
            }

            function addCustomMarker(position, type) {
                const iconUrl = type === 'red' ? 
                    'http://maps.google.com/mapfiles/ms/icons/red-dot.png' : 
                    type === 'blue' ? 
                        'http://maps.google.com/mapfiles/ms/icons/blue-dot.png' : 
                        'http://maps.google.com/mapfiles/ms/icons/green-dot.png';
                
                const marker = new google.maps.Marker({
                    position: position,
                    map: map,
                    icon: {
                        url: iconUrl,
                        scaledSize: new google.maps.Size(32, 32)
                    }
                });
                
                marker.addListener('click', () => {
                    showPointInfo({
                        address: 'Адреса обраної точки',
                        description: 'Опис обраної точки',
                        loi: type === 'red' ? 3 : type === 'blue' ? 7 : 9,
                        categories: ['Категорія 1', 'Категорія 2'],
                        verified: true,
                        id: 'custom-' + Math.random().toString(36).substr(2, 9)
                    });
                });
            }

            function getColor(loi) {
                if (loi <= 3) return "http://maps.google.com/mapfiles/ms/icons/red-dot.png";
                if (loi <= 7) return "http://maps.google.com/mapfiles/ms/icons/blue-dot.png";
                return "http://maps.google.com/mapfiles/ms/icons/green-dot.png";
            }

            function addMarker(p) {
                const m = new google.maps.Marker({
                    position: { lat: p.latitude, lng: p.longitude },
                    map, 
                    icon: {
                        url: getColor(p.loi),
                        scaledSize: new google.maps.Size(32, 32)
                    }
                });
                m.addListener('click', () => showPointInfo(p));
            }

            async function showPointInfo(p) {
                document.querySelector('.info-content').innerHTML = `
                    <p class="info-item"><strong>${p.address || 'Назва місця, вулиці'}</strong></p>
                    <p class="info-item"><strong>LOI:</strong> ${p.loi}</p>
                    <p class="info-item"><strong>Категорії:</strong> ${(p.categories ?? []).join(', ') || '-'}</p>
                    <p class="info-item"><strong>Перевірено:</strong> ${p.verified ? 'Так' : 'Ні'}</p>
                    ${userToken ? `<button class="save-point-btn" onclick="savePoint('${p.id}')">Зберегти точку</button>` : ''}
                    ${userToken ? `
                        <div class="review-form">
                          <textarea id="rev" placeholder="Відгук"></textarea>
                          <input id="rate" type="number" min="0" max="5" placeholder="Оцінка (0-5)" />
                          <button onclick="addReview('${p.id}')">Додати відгук</button>
                        </div>`: ''
                    }
                `;
                loadReviews(p.id);
            }

            async function loadReviews(pointId) {
                try {
                    const res = await fetch('/api/review/byPoint/' + pointId);
                    const rev = await res.json();
                    const rblock = document.getElementById('reviews');
                    rblock.innerHTML = "";
                    
                    if (rev.length == 0) {
                        // Add empty placeholders
                        for (let i = 0; i < 4; i++) {
                            rblock.innerHTML += `<div class="review-placeholder"></div>`;
                        }
                    } else {
                        rev.forEach(r => {
                            rblock.innerHTML += `
                                <div class="review-item">
                                    <div class="review-rating">Оцінка: ${r.rating}</div>
                                    <div class="review-text">${r.reviewText}</div>
                                </div>`;
                        });
                    }
                } catch (error) {
                    // If there's an error, show placeholders
                    const rblock = document.getElementById('reviews');
                    rblock.innerHTML = "";
                    for (let i = 0; i < 4; i++) {
                        rblock.innerHTML += `<div class="review-placeholder"></div>`;
                    }
                }
            }

            async function addReview(pointId) {
                const body = {
                    pointId: pointId,
                    reviewText: document.getElementById('rev').value,
                    rating: +document.getElementById('rate').value
                };

                const res = await fetch('/api/review', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + userToken
                    },
                    body: JSON.stringify(body)
                });

                if (res.ok) {
                    alert('Відгук додано');
                    loadReviews(pointId);
                } else {
                    const err = await res.text();
                    alert('Помилка: ' + err);
                }
            }

            async function savePoint(id) {
                const res = await fetch('/api/user/savePoint/' + id, {
                    method: 'POST',
                    headers: { Authorization: 'Bearer ' + userToken }
                });
                if (res.ok) alert('Збережено'); else alert('Помилка');
            }

            function setupSearch() {
                const geocoder = new google.maps.Geocoder();
                document.getElementById('searchInput').addEventListener('keydown', e => {
                    if (e.key !== 'Enter') return;
                    const q = e.target.value.trim(); if (!q) return;
                    geocoder.geocode({ address: q }, (res, status) => {
                        if (status === 'OK' && res[0]) {
                            map.setCenter(res[0].geometry.location);
                            map.setZoom(14);
                        } else alert('Не знайдено');
                    });
                });
            }
            
            // Функція для налаштування перемикача теми
            function setupThemeToggle() {
                const themeToggle = document.getElementById('themeToggle');
                const themeIcon = themeToggle.querySelector('i');
                
                // Встановлюємо правильну іконку при завантаженні
                updateThemeIcon(themeIcon);
                
                // Додаємо обробник подій для кнопки
                themeToggle.addEventListener('click', async () => {
                    // Змінюємо тему
                    currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
                    
                    // Зберігаємо вибір користувача
                    localStorage.setItem('theme', currentTheme);
                    
                    // Оновлюємо іконку
                    updateThemeIcon(themeIcon);
                    
                    // Оновлюємо стиль карти
                    await updateMapStyle();
                    
                    // Додатково можна змінити клас body для перемикання CSS-стилів інтерфейсу
                    document.body.classList.toggle('light-theme');
                });
            }

            // Функція для оновлення іконки теми
            function updateThemeIcon(iconElement) {
                if (currentTheme === 'dark') {
                    iconElement.className = 'bi bi-sun-fill'; // Показуємо сонце, щоб перейти на світлу тему
                } else {
                    iconElement.className = 'bi bi-moon-fill'; // Показуємо місяць, щоб перейти на темну тему
                }
            }

            // Функція для оновлення стилю карти
            async function updateMapStyle() {
                if (!map) return;
                
                const styleUrl = currentTheme === 'dark' 
                    ? '/styles/map-style-dark.json' 
                    : '/styles/map-style-light.json';
                
                try {
                    const style = await fetch(styleUrl).then(res => res.json());
                    map.setOptions({ styles: style });
                } catch (error) {
                    console.error('Помилка при завантаженні стилю карти:', error);
                }
            }
        </script>
        <script async defer src="https://maps.googleapis.com/maps/api/js?key=@Configuration["GoogleMaps:ApiKey"]&callback=initMap"></script>
    }
</body>
</html>