@page
@model best_hackathon_2025.Pages.IndexModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Головна";
}

<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <title>CHILLGO - Інтерактивна карта</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="~/css/chillgo-style.css" />
    <style>
        body.light-theme {
            /* Додаткові стилі для світлої теми, якщо потрібно */
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Header/Navigation Bar -->
        <header class="top-navbar">
            <div class="logo-container">
                <div class="logo-grid">
                    <div></div><div></div><div></div>
                    <div></div><div></div><div></div>
                    <div></div><div></div><div></div>
                </div>
                <span class="brand-name">CHILLGO</span>
            </div>
            
            <div class="search-container">
                <div class="search-box">
                    <i class="bi bi-search search-icon"></i>
                    <input type="text" id="searchInput" placeholder="Пошук" oninput="searchPoints(this.value)" />
                    <div id="searchSuggestions" class="search-suggestions"></div>
                </div>
            </div>

            <div class="filter-container">
                <div class="filter-dropdown">
                    <i class="bi bi-sliders filter-icon" onclick="toggleFilterMenu()"></i>
                    <div class="filter-menu" id="filterMenu">
                        <div class="filter-item" onclick="applyFilter('all')">Усі поінти</div>
                        <div class="filter-item" onclick="applyFilter('vision')">Вади зору</div>
                        <div class="filter-item" onclick="applyFilter('hearing')">Вади слуху</div>
                        <div class="filter-item" onclick="applyFilter('movement')">Порушення ОРА</div>
                        <div class="filter-item" onclick="applyFilter('prosthesis')">Протези/Ортопедія</div>
                        <div class="filter-item" onclick="applyFilter('coordination')">Координація рухів</div>
                    </div>
                </div>
            </div>

            <div class="nav-actions">
                <button id="themeToggle" class="nav-icon-button theme-toggle">
                    <i class="bi bi-moon-fill"></i>
                </button>
                <div class="auth-links">
                    <a href="/Auth/Login" class="nav-link">Увійти</a>
                    <a href="/Auth/Register" class="nav-link register-link">Реєстрація</a>
                </div>
            </div>
        </header>

        <!-- Main Content with Sidebar -->
        <div class="content-wrapper">
            <!-- Sidebar -->
            <aside class="sidebar" id="sidebar">
                <div class="info-section">
                    <h2 class="section-header">Інформація:</h2>
                    <div class="info-content">
                        <p class="info-item"><strong>Назва місця, вулиці</strong></p>
                        <p class="info-item"><strong>LOI:</strong> 0</p>
                        <p class="info-item"><strong>Категорії:</strong> -</p>
                        <p class="info-item"><strong>Перевірено:</strong> Ні</p>
                        <button class="save-point-btn">Зберегти точку</button>
                    </div>
                </div>

                <div class="reviews-section">
                    <h2 class="section-header">Відгуки:</h2>
                    <div id="reviews" class="reviews-container">
                        <div class="review-placeholder">На жаль, відгуків немає(</div>
                        <div class="review-text">Можете додати свій!</div>
                    </div>
                    
                    <div class="add-review">
                        <textarea id="rev" placeholder="Додати відгук"></textarea>
                        <div class="rating-container">
                            <i class="bi bi-star star-rating"></i>
                            <i class="bi bi-star star-rating"></i>
                            <i class="bi bi-star star-rating"></i>
                            <i class="bi bi-star star-rating"></i>
                            <i class="bi bi-star star-rating"></i>
                            <input id="rate" type="hidden" value="0">
                        </div>
                        <button onclick="addReview()" class="add-review-btn">Додати відгук</button>
                    </div>
                </div>
                
                <div class="location-indicator">
                    <i class="bi bi-geo-alt-fill location-icon"></i>
                    <span class="location-name">Львів</span>
                </div>
            </aside>

            <!-- Map Area -->
            <main class="main-content">
                <!-- Routing Options Panel -->
                <div class="route-panel">
                    <div class="route-inputs">
                        <div class="route-point">
                            <i class="bi bi-geo-alt-fill"></i>
                            <input type="text" id="pointAInput" placeholder="Звідки?" />
                        </div>
                        <div class="route-point">
                            <i class="bi bi-geo-alt-fill"></i>
                            <input type="text" id="pointBInput" placeholder="Куди?" />
                        </div>
                    </div>
                    
                    <div class="route-results" id="routeResults">
                        <h3>Знайдено 3 маршрути для тебе</h3>
                        
                        <div class="route-option" id="route-option-0">
                            <div class="route-info">
                                <span class="route-number">Маршрут 1: 22 хв.</span>
                                <span class="route-details">Вулиця - Вулиця - Вулиця.</span>
                                <span class="route-inclusive">[Інклюзивний]</span>
                            </div>
                        </div>
                        
                        <div class="route-option" id="route-option-1">
                            <div class="route-info">
                                <span class="route-number">Маршрут 2: 18 хв.</span>
                                <span class="route-details">Вулиця - Вулиця - Вулиця.</span>
                                <span class="route-partially">[Частково інклюзивний]</span>
                            </div>
                        </div>
                        
                        <div class="route-option" id="route-option-2">
                            <div class="route-info">
                                <span class="route-number">Маршрут 3: 16 хв.</span>
                                <span class="route-details">Вулиця - Вулиця - Вулиця.</span>
                                <span class="route-non-inclusive">[Не інклюзивний]</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Map Canvas -->
                <div id="map"></div>
                
                <!-- Controls -->
                <div class="map-controls">

                    <button class="zoom-button zoom-in">+</button>
                    <button class="zoom-button zoom-out">−</button>
                </div>

                <div id="route-info-block" style="display: none;">
                    <b>Точка A:</b> <span id="pointA-text">Не обрано</span><br>
                    <b>Точка B:</b> <span id="pointB-text">Не обрано</span><br>
                    <button onclick="resetRoute()">Очистити маршрут</button>
                </div>
            </main>
        </div>
    </div>

    @section Scripts {
        <script>
            let map, userToken = localStorage.getItem('token');
            let directionsService, directionsRenderer, currentPosition;
            let markers = [];

            async function getUserLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (pos) => {
                            currentPosition = {
                                lat: pos.coords.latitude,
                                lng: pos.coords.longitude
                            };
                        },
                        () => { alert("Не вдалося отримати вашу геолокацію"); }
                    );
                }
            }

            let routeLocked = false;
            let destinationMarker = null;

            let pointA = null;
            let pointB = null;
            let pointAMarker = null;
            let pointBMarker = null;
            let allPoints = []; // всі поінти
            let routePolylines = [];

            const inclusivenessList = [
                "Пандус",
                "Ліфт",
                "Тактильна плитка",
                "Звукові сигнали",
                "Дублювання тексту шрифтом Брайля",
                "Вказівники для слабозорих",
                "Інклюзивна вбиральня",
                "Паркування для інвалідів",
                "Занижений бордюр",
                "Доступна каса",
                "Доступний вхід без сходів",
                "Спеціальні меблі",
                "Дублювання інформації жестовою мовою",
                "Розмітка на підлозі",
                "Антиковзаюче покриття",
                "Звукові оголошення",
                "Доступність громадського транспорту",
                "Широкі проходи для колясок",
                "Пандус в транспорті",
                "Інше"
            ];

            const disabilityCategories = {
                vision: [
                    "Тактильна плитка",
                    "Звукові сигнали",
                    "Дублювання тексту шрифтом Брайля",
                    "Вказівники для слабозорих",
                    "Звукові оголошення"
                ],
                hearing: [
                    "Дублювання інформації жестовою мовою",
                    "Візуальні вказівники"
                ],
                movement: [
                    "Пандус",
                    "Ліфт",
                    "Занижений бордюр",
                    "Доступний вхід без сходів",
                    "Широкі проходи для колясок",
                    "Інклюзивна вбиральня",
                    "Пандус в транспорті",
                    "Паркування для інвалідів"
                ],
                prosthesis: [
                    "Антиковзаюче покриття",
                    "Доступний вхід без сходів",
                    "Широкі проходи для колясок"
                ],
                coordination: [
                    "Антиковзаюче покриття",
                    "Доступний вхід без сходів",
                    "Розмітка на підлозі"
                ]
            };

            function clearPolylines() {
                routePolylines.forEach(p => p.setMap(null));
                routePolylines = [];
            }

            function updatePointsInfo() {
                document.getElementById('pointA-text').innerText = pointA ? `${pointA.lat().toFixed(5)}, ${pointA.lng().toFixed(5)}` : 'Не обрано';
                document.getElementById('pointB-text').innerText = pointB ? `${pointB.lat().toFixed(5)}, ${pointB.lng().toFixed(5)}` : 'Не обрано';
                
                // Також оновлюємо поля вводу
                if (pointA) {
                    document.getElementById('pointAInput').value = `${pointA.lat().toFixed(5)}, ${pointA.lng().toFixed(5)}`;
                }
                
                if (pointB) {
                    document.getElementById('pointBInput').value = `${pointB.lat().toFixed(5)}, ${pointB.lng().toFixed(5)}`;
                }
            }

            function resetRoute() {
                if (pointAMarker) pointAMarker.setMap(null);
                if (pointBMarker) pointBMarker.setMap(null);
                pointA = null;
                pointB = null;
                routeLocked = false;
                updatePointsInfo();
                clearPolylines();
                directionsRenderer.set('directions', null);
                
                // Очищаємо поля вводу
                document.getElementById('pointAInput').value = '';
                document.getElementById('pointBInput').value = '';
                
                // Ховаємо маршрути
                document.getElementById('routeResults').style.display = 'none';
            }

            async function buildRoute(A, B) {
                const request = {
                    origin: A,
                    destination: B,
                    travelMode: google.maps.TravelMode.TRANSIT,
                    provideRouteAlternatives: true
                };

                directionsService.route(request, async (result, status) => {
                    if (status !== 'OK') {
                        alert("Не вдалося побудувати маршрут");
                        return;
                    }

                    clearPolylines();

                    const routes = result.routes.slice(0, 3);
                    routes.sort((a, b) => a.legs[0].duration.value - b.legs[0].duration.value);

                    const colors = ['#28a745', '#ffc107', '#dc3545'];
                    const routeResults = document.getElementById('routeResults');
                    
                    // Очищаємо та оновлюємо заголовок
                    routeResults.innerHTML = '<h3>Знайдено 3 маршрути для тебе</h3>';
                    
                    routes.forEach((route, index) => {
                        const leg = route.legs[0];
                        const duration = leg.duration.text;
                        const distance = leg.distance.text;
                        const transportLines = leg.steps
                            .filter(s => s.transit)
                            .map(s => s.transit.line.short_name);
                        const isInclusive = transportLines.every(whitelistTransport);
                        const color = colors[index];
                        
                        // Визначаємо тип маршруту
                        let inclusivityType = '';
                        let inclusivityClass = '';
                        
                        if (isInclusive) {
                            inclusivityType = '[Інклюзивний]';
                            inclusivityClass = 'route-inclusive';
                        } else if (index === 1) {
                            inclusivityType = '[Частково інклюзивний]';
                            inclusivityClass = 'route-partially';
                        } else if (index === 2) {
                            inclusivityType = '[Не інклюзивний]';
                            inclusivityClass = 'route-non-inclusive';
                        }

                        // Додаємо новий елемент маршруту
                        routeResults.innerHTML += `
                            <div class="route-option" id="route-option-${index}" style="border-left: 5px solid ${color}">
                                <div class="route-info">
                                    <span class="route-number">Маршрут ${index + 1}: ${leg.duration.text}</span>
                                    <span class="route-details">Вулиця - Вулиця - Вулиця</span>
                                    <span class="${inclusivityClass}">${inclusivityType}</span>
                                </div>
                                <button onclick="selectRoute(${index})" class="select-route-btn">Обрати</button>
                            </div>
                        `;

                        const polyline = new google.maps.Polyline({
                            path: route.overview_path,
                            strokeColor: color,
                            strokeOpacity: 0.9,
                            strokeWeight: 5,
                            map: map
                        });
                        routePolylines.push(polyline);
                    });

                    // Відображаємо блок з маршрутами
                    routeResults.style.display = 'block';
                    
                    window.allRoutesResult = result;
                    routeLocked = true;
                });
            }

            function selectRoute(index) {
                clearPolylines();

                const route = window.allRoutesResult.routes[index];

                const polyline = new google.maps.Polyline({
                    path: route.overview_path,
                    strokeColor: '#000000', // чорний для вибраного
                    strokeOpacity: 1,
                    strokeWeight: 6,
                    map: map
                });

                routePolylines.push(polyline);

                directionsRenderer.setDirections({
                    routes: [route]
                });

                const leg = route.legs[0];
                const routeResults = document.getElementById('routeResults');
                
                // Оновлюємо заголовок
                routeResults.innerHTML = `<h3>Обрано маршрут ${index + 1}</h3>`;
                
                // Додаємо детальні інструкції маршруту
                leg.steps.forEach((step) => {
                    let instructionHTML = '';
                    
                    if (step.transit) {
                        instructionHTML = `
                            <div class="route-step transit-step">
                                <div class="step-icon">🚏</div>
                                <div class="step-detail">
                                    <span class="route-number">№${step.transit.line.short_name}</span>
                                    <span>з <b>${step.transit.departure_stop.name}</b> до <b>${step.transit.arrival_stop.name}</b></span>
                                    <span>(${step.transit.line.vehicle.type})</span>
                                </div>
                            </div>`;
                    } else {
                        instructionHTML = `
                            <div class="route-step walk-step">
                                <div class="step-icon">🚶‍♂️</div>
                                <div class="step-detail">
                                    <span>${step.instructions.replace(/<[^>]*>?/gm, '')}</span>
                                    <span>(${step.distance.text})</span>
                                </div>
                            </div>`;
                    }
                    
                    routeResults.innerHTML += instructionHTML;
                });
                
                // Додаємо кнопку для нового маршруту
                routeResults.innerHTML += `
                    <button onclick="resetRoute()" class="new-route-btn">Новий маршрут</button>
                `;
            }

            let currentTheme = localStorage.getItem('theme') || 'dark'; // За замовчуванням темна тема

            function whitelistTransport(routeNumber) {
                const inclusiveRoutes = ["1А","3А","5А","6А","8А","9","10","16","18","22","23","24",
                "25","27","30","31","32","33","38","29","40","46","47A","48","49A","52","53","61","84","92",
                ]; // Твій whitelist
                return inclusiveRoutes.includes(routeNumber);
            }

            async function initMap() {
                // Завантажуємо стиль карти в залежності від поточної теми
                const styleUrl = currentTheme === 'dark' 
                    ? '/styles/map-style-dark.json' 
                    : '/styles/map-style-light.json';
                const style = await fetch(styleUrl).then(res => res.json());
                getUserLocation();

                const center = { lat: 49.8397, lng: 24.0297 };
                map = new google.maps.Map(document.getElementById("map"), {
                    zoom: 12,
                    center,
                    styles: style,
                    disableDefaultUI: true,
                    zoomControl: false,
                    mapTypeControl: false,
                    streetViewControl: false,
                    fullscreenControl: false
                });

                directionsService = new google.maps.DirectionsService();
                directionsRenderer = new google.maps.DirectionsRenderer({ 
                    map: map,
                    suppressMarkers: true, // Приховуємо стандартні маркери A і B
                    polylineOptions: {
                        strokeColor: '#000000',
                        strokeWeight: 5,
                        strokeOpacity: 0.7
                    }
                });
                
                // Custom zoom controls
                document.querySelector('.zoom-in').addEventListener('click', () => {
                    map.setZoom(map.getZoom() + 1);
                });
                
                document.querySelector('.zoom-out').addEventListener('click', () => {
                    map.setZoom(map.getZoom() - 1);
                });
                
                const points = await (await fetch('/api/point')).json();
                points.forEach(addMarker);
                allPoints = points; // зберігаю всі поінти

                setupSearch();
                setupThemeToggle();
                setupRouteInputs();
                setupStarRating();
                
                // Встановлюємо правильний клас для body при завантаженні
                document.body.classList.toggle('light-theme', currentTheme === 'light');

                map.addListener('click', (e) => {
                    if (routeLocked) return;

                    if (!pointA) {
                        pointA = e.latLng;
                        if (pointAMarker) pointAMarker.setMap(null);
                        pointAMarker = new google.maps.Marker({
                            position: pointA,
                            map: map,
                            label: "A",
                            animation: google.maps.Animation.DROP
                        });
                    } else if (!pointB) {
                        pointB = e.latLng;
                        if (pointBMarker) pointBMarker.setMap(null);
                        pointBMarker = new google.maps.Marker({
                            position: pointB,
                            map: map,
                            label: "B",
                            animation: google.maps.Animation.DROP
                        });
                        buildRoute(pointA, pointB);
                    }

                    updatePointsInfo();
                });
                
                // Спочатку приховуємо результати маршруту
                document.getElementById('routeResults').style.display = 'none';
            }
            
            function setupRouteInputs() {
                // Обробка введення в поле "Звідки"
                document.getElementById('pointAInput').addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        const searchText = this.value.trim();
                        const point = findPointByAddress(searchText);
                        
                        if (point) {
                            setPointA({lat: point.latitude, lng: point.longitude});
                            if (pointB) buildRoute(pointA, pointB);
                        }
                    }
                });
                
                // Обробка введення в поле "Куди"
                document.getElementById('pointBInput').addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') {
                        const searchText = this.value.trim();
                        const point = findPointByAddress(searchText);
                        
                        if (point) {
                            setPointB({lat: point.latitude, lng: point.longitude});
                            if (pointA) buildRoute(pointA, pointB);
                        }
                    }
                });
            }
            
            function findPointByAddress(address) {
                return allPoints.find(p => 
                    p.address && p.address.toLowerCase().includes(address.toLowerCase())
                );
            }
            
            function setupStarRating() {
                const stars = document.querySelectorAll('.star-rating');
                
                stars.forEach((star, index) => {
                    star.addEventListener('click', () => {
                        // Встановлюємо рейтинг
                        document.getElementById('rate').value = index + 1;
                        
                        // Оновлюємо відображення зірок
                        stars.forEach((s, i) => {
                            if (i <= index) {
                                s.classList.remove('bi-star');
                                s.classList.add('bi-star-fill');
                            } else {
                                s.classList.remove('bi-star-fill');
                                s.classList.add('bi-star');
                            }
                        });
                    });
                    
                    // Додаємо ефект наведення
                    star.addEventListener('mouseover', () => {
                        stars.forEach((s, i) => {
                            if (i <= index) {
                                s.classList.add('star-hover');
                            }
                        });
                    });
                    
                    star.addEventListener('mouseout', () => {
                        stars.forEach(s => s.classList.remove('star-hover'));
                    });
                });
            }

            function getColor(loi) {
                if (loi <= 3) return "http://maps.google.com/mapfiles/ms/icons/red-dot.png";
                if (loi <= 7) return "http://maps.google.com/mapfiles/ms/icons/blue-dot.png";
                return "http://maps.google.com/mapfiles/ms/icons/green-dot.png";
            }

            function addMarker(p) {
                const m = new google.maps.Marker({
                    position: { lat: p.latitude, lng: p.longitude },
                    map,
                    icon: {
                        url: getColor(p.loi),
                        scaledSize: new google.maps.Size(32, 32)
                    }
                });

                m.addListener('click', () => {
                    showPointInfo(p);

                    if (!routeLocked) {
                        document.querySelector('.info-content').innerHTML += `
                            <button onclick='setPointA({lat:${p.latitude}, lng:${p.longitude}})'>Задати як точку A</button>
                            <button onclick='setPointB({lat:${p.latitude}, lng:${p.longitude}})'>Задати як точку B</button>
                        `;
                    }
                });
                markers.push(m);
            }

            function filterPoints() {
                const type = document.getElementById('disabilityFilter').value;

                // Прибираємо всі маркери
                markers.forEach(m => m.setMap(null));

                if (type === 'all') {
                    markers.forEach(m => m.setMap(map));
                    return;
                }

                const requiredCategories = disabilityCategories[type];

                markers.forEach((m, idx) => {
                    const point = allPoints[idx];
                    if (point.categories && point.categories.some(c => requiredCategories.includes(c))) {
                        m.setMap(map);
                    }
                });
            }

            async function showPointInfo(p) {
                document.querySelector('.info-content').innerHTML = `
                    <p class="info-item"><strong>${p.address || 'Назва місця, вулиці'}</strong></p>
                    <p class="info-item"><strong>LOI:</strong> ${p.loi}</p>
                    <p class="info-item"><strong>Категорії:</strong> ${(p.categories ?? []).join(', ') || '-'}</p>
                    <p class="info-item"><strong>Перевірено:</strong> ${p.verified ? 'Так' : 'Ні'}</p>

                    ${userToken ? `<button class="save-point-btn" onclick="savePoint('${p.id}')">Зберегти точку</button>` : ''}

                    ${currentPosition && p.position ? `<button class="route-btn" onclick="setPointA(${JSON.stringify(p.position)})">Задати як точку A</button>
                                                       <button class="route-btn" onclick="setPointB(${JSON.stringify(p.position)})">Задати як точку B</button>` : ''}

                    ${currentPosition && p.latitude && p.longitude ? `<button class="route-btn" onclick="buildRoute({lat: ${p.latitude}, lng: ${p.longitude}})">Прокласти маршрут</button>` : ''}
                `;

                loadReviews(p.id);
            }

            async function loadReviews(pointId) {
                try {
                    const res = await fetch('/api/review/byPoint/' + pointId);
                    const rev = await res.json();
                    const rblock = document.getElementById('reviews');
                    rblock.innerHTML = "";
                    
                    if (rev.length == 0) {
                        // Add empty placeholders
                        rblock.innerHTML += `
                            <div class="review-placeholder">На жаль, відгуків немає(</div>
                            <div class="review-text">Можете додати свій!</div>
                        `;
                    } else {
                        rev.forEach(r => {
                            rblock.innerHTML += `
                                <div class="review-item">
                                    <div class="review-rating">
                                        ${'★'.repeat(r.rating)}${'☆'.repeat(5-r.rating)}
                                    </div>
                                    <div class="review-text">${r.reviewText}</div>
                                </div>`;
                        });
                    }
                } catch (error) {
                    // If there's an error, show placeholders
                    const rblock = document.getElementById('reviews');
                    rblock.innerHTML = `
                        <div class="review-placeholder">На жаль, відгуків немає(</div>
                        <div class="review-text">Можете додати свій!</div>
                    `;
                }
            }

            async function addReview(pointId) {
                const body = {
                    pointId: pointId,
                    reviewText: document.getElementById('rev').value,
                    rating: +document.getElementById('rate').value
                };

                const res = await fetch('/api/review', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + userToken
                    },
                    body: JSON.stringify(body)
                });

                if (res.ok) {
                    alert('Відгук додано');
                    loadReviews(pointId);
                } else {
                    const err = await res.text();
                    alert('Помилка: ' + err);
                }
            }

            async function savePoint(id) {
                const res = await fetch('/api/user/savePoint/' + id, {
                    method: 'POST',
                    headers: { Authorization: 'Bearer ' + userToken }
                });
                if (res.ok) alert('Збережено'); else alert('Помилка');
            }

            function setPointA(position) {
                if (pointAMarker) pointAMarker.setMap(null);
                pointA = new google.maps.LatLng(position.lat, position.lng);
                pointAMarker = new google.maps.Marker({
                    position: pointA,
                    map: map,
                    label: "A",
                    animation: google.maps.Animation.DROP
                });
                updatePointsInfo();
                if (pointB) buildRoute(pointA, pointB);
            }

            function setPointB(position) {
                if (pointBMarker) pointBMarker.setMap(null);
                pointB = new google.maps.LatLng(position.lat, position.lng);
                pointBMarker = new google.maps.Marker({
                    position: pointB,
                    map: map,
                    label: "B",
                    animation: google.maps.Animation.DROP
                });
                updatePointsInfo();
                if (pointA) buildRoute(pointA, pointB);
            }

            function selectSearchPoint(lat, lng, p) {
                focusPoint(lat, lng);
                showPointInfo(p);

                const suggestions = document.getElementById('searchSuggestions');
                suggestions.style.display = 'none';
                suggestions.innerHTML = '';
            }


            function searchPoints(query) {
                const suggestions = document.getElementById('searchSuggestions');
                if (!query.trim()) {
                    suggestions.style.display = 'none';
                    suggestions.innerHTML = '';
                    return;
                }

                const found = allPoints.filter(p => p.address.toLowerCase().includes(query.toLowerCase()));

                if (found.length === 0) {
                    suggestions.style.display = 'none';
                    suggestions.innerHTML = '';
                    return;
                }

                suggestions.innerHTML = '';
                found.forEach(p => {
                    const item = document.createElement('div');
                    item.className = 'search-suggestion-item';
                    item.textContent = p.address;
                    item.onclick = () => {
                        focusPoint(p.latitude, p.longitude);
                        showPointInfo(p);
                        suggestions.style.display = 'none';
                    };
                    suggestions.appendChild(item);
                });
                suggestions.style.display = 'block';
            }

            function focusPoint(lat, lng) {
                map.setCenter({ lat, lng });
                map.setZoom(16);
            }

            function setupSearch() {

                const geocoder = new google.maps.Geocoder();

                document.getElementById('searchInput').addEventListener('input', e => {
                    searchPoints(e.target.value);
                });

                document.getElementById('searchInput').addEventListener('keydown', e => {
                    if (e.key === 'Enter') {
                        const query = e.target.value.toLowerCase();
                        const found = allPoints.find(p => p.address.toLowerCase() === query);
                        if (found) {
                            selectSearchPoint(found.latitude, found.longitude, found);
                        }
                    }
                });

            }
            
            // Функція для налаштування перемикача теми
            function setupThemeToggle() {
                const themeToggle = document.getElementById('themeToggle');
                const themeIcon = themeToggle.querySelector('i');
                
                // Встановлюємо правильну іконку при завантаженні
                updateThemeIcon(themeIcon);
                
                // Додаємо обробник подій для кнопки
                themeToggle.addEventListener('click', async () => {
                    // Змінюємо тему
                    currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
                    
                    // Зберігаємо вибір користувача
                    localStorage.setItem('theme', currentTheme);
                    
                    // Оновлюємо іконку
                    updateThemeIcon(themeIcon);
                    
                    // Оновлюємо стиль карти
                    await updateMapStyle();
                    
                    // Додатково можна змінити клас body для перемикання CSS-стилів інтерфейсу
                    document.body.classList.toggle('light-theme');
                });
            }

            // Функція для оновлення іконки теми
            function updateThemeIcon(iconElement) {
                if (currentTheme === 'dark') {
                    iconElement.className = 'bi bi-sun-fill'; // Показуємо сонце, щоб перейти на світлу тему
                } else {
                    iconElement.className = 'bi bi-moon-fill'; // Показуємо місяць, щоб перейти на темну тему
                }
            }

            // Функція для оновлення стилю карти
            async function updateMapStyle() {
                if (!map) return;
                
                const styleUrl = currentTheme === 'dark' 
                    ? '/styles/map-style-dark.json' 
                    : '/styles/map-style-light.json';
                
                try {
                    const style = await fetch(styleUrl).then(res => res.json());
                    map.setOptions({ styles: style });
                } catch (error) {
                    console.error('Помилка при завантаженні стилю карти:', error);
                }
            }
        </script>
        <script>
    function toggleFilterMenu() {
        const menu = document.getElementById('filterMenu');
        menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
    }

    function applyFilter(filterType) {
        toggleFilterMenu(); // Закриваємо меню після вибору
        filterPoints(filterType); // Викликаємо існуючу функцію для фільтрації
    }

    // Модифікуємо функцію filterPoints для прийому параметра
    function filterPoints(type = 'all') {
        const markers = window.markers || [];
        markers.forEach(m => m.setMap(null)); // Прибираємо всі маркери

        if (type === 'all') {
            markers.forEach(m => m.setMap(map));
            return;
        }

        const requiredCategories = disabilityCategories[type];
        markers.forEach((m, idx) => {
            const point = allPoints[idx];
            if (point.categories && point.categories.some(c => requiredCategories.includes(c))) {
                m.setMap(map);
            }
        });
    }

    // Закриваємо меню при кліку поза ним
    document.addEventListener('click', (e) => {
        const menu = document.getElementById('filterMenu');
        if (!menu.contains(e.target) && !e.target.classList.contains('filter-icon')) {
            menu.style.display = 'none';
        }
    });
</script>
        <script async defer src="https://maps.googleapis.com/maps/api/js?key=@Configuration["GoogleMaps:ApiKey"]&callback=initMap"></script>
    }
</body>
</html>