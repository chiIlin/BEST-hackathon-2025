@page
@model best_hackathon_2025.Pages.IndexModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Головна";
}

<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="utf-8" />
    <title>CHILLGO - Інтерактивна карта</title>
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="~/css/chillgo-style.css" />
    <style>
        body.light-theme {
            /* Додаткові стилі для світлої теми, якщо потрібно */
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Header/Navigation Bar -->
        <header class="top-navbar">
            <div class="logo-container">
                <div class="logo-grid">
                    <div></div><div></div><div></div>
                    <div></div><div></div><div></div>
                    <div></div><div></div><div></div>
                </div>
                <span class="brand-name">CHILLGO</span>
            </div>
            
            <div class="search-container">
                <div class="search-box">
                    <i class="bi bi-search search-icon"></i>
                    <input type="text" id="searchInput" placeholder="Пошук" />
                    <div id="searchSuggestions" style="position:absolute; background:white; border:1px solid #ccc; z-index:99; display:none; max-height:200px; overflow-y:auto; width:250px; top: 40px;"></div>
                </div>
            </div>
            
            <div class="nav-actions">
                
                <button id="themeToggle" class="nav-icon-button theme-toggle">
                    <i class="bi bi-moon-fill"></i>
                </button>
                <div class="auth-links">
                    <a href="/Auth/Login" class="nav-link">Увійти</a>
                    <a href="/Auth/Register" class="nav-link register-link">Реєстрація</a>
                </div>
            </div>
        </header>

        <!-- Main Content with Sidebar -->
        <div class="content-wrapper">
            <!-- Sidebar -->
            <aside class="sidebar" id="sidebar">
                <div class="info-section">
                    <h2 class="section-header">Інформація:</h2>
                    <div class="info-content">
                        <p class="info-item"><strong>Назва місця, вулиці</strong></p>
                        <p class="info-item"><strong>LOI:</strong> 0</p>
                        <p class="info-item"><strong>Категорії:</strong> -</p>
                        <p class="info-item"><strong>Перевірено:</strong> Ні</p>
                    </div>
                </div>

                <div class="reviews-section">
                    <h2 class="section-header reviews-header">Відгуки:</h2>
                    <div id="reviews" class="reviews-container">
                        <div class="review-placeholder"></div>
                        <div class="review-placeholder"></div>
                        <div class="review-placeholder"></div>
                        <div class="review-placeholder"></div>
                    </div>
                </div>
                
                <div class="route-instructions" style="padding: 15px; background: #f4f4f4; border-radius: 10px; margin: 10px;">
                    <h3>Маршрут:</h3>
                    <div id="routeSteps">
                        <p>Щоб побудувати маршрут — натисніть на кнопку "Прокласти маршрут"</p>
                    </div>
                </div>


                <div class="location-indicator">
                    <i class="bi bi-geo-alt-fill location-icon"></i>
                    <span class="location-name">Львів</span>
                </div>
            </aside>

            <!-- Map Area -->
            <main class="main-content">
                <div id="route-info-block" style="position: absolute; top: 10px; left: 10px; background: #f4f4f4; border-radius: 8px; padding: 10px; z-index: 10;">
                    <b>Точка A:</b> <span id="pointA-text">Не обрано</span><br>
                    <b>Точка B:</b> <span id="pointB-text">Не обрано</span><br>
                    <button onclick="resetRoute()" style="margin-top:5px;">Очистити маршрут</button>
                </div>


                <div id="map"></div>
                <div class="map-controls">
                    <select id="routeType" class="route-select">
                        <option value="walking">Пішки</option>
                        <option value="inclusive">Інклюзивний транспорт</option>
                        <option value="any">Будь-який транспорт</option>
                    </select>

                    <button class="zoom-button zoom-in">+</button>
                    <button class="zoom-button zoom-out">−</button>
                </div>
                <div class="map-attribution">
                    <img src="https://www.google.com/images/branding/googlelogo/1x/googlelogo_white_60x24dp.png" alt="Google" class="google-logo">
                </div>
            </main>
        </div>
    </div>

    @section Scripts {
        <script>
            let map, userToken = localStorage.getItem('token');
            let directionsService, directionsRenderer, currentPosition;


            async function getUserLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        (pos) => {
                            currentPosition = {
                                lat: pos.coords.latitude,
                                lng: pos.coords.longitude
                            };
                        },
                        () => { alert("Не вдалося отримати вашу геолокацію"); }
                    );
                }
            }

            let routeLocked = false;
            let destinationMarker = null;

            let pointA = null;
            let pointB = null;
            let pointAMarker = null;
            let pointBMarker = null;
            let allPoints = []; // всі поінти
            let routePolylines = [];

            const inclusivenessList = [
                "Пандус",
                "Ліфт",
                "Тактильна плитка",
                "Звукові сигнали",
                "Дублювання тексту шрифтом Брайля",
                "Вказівники для слабозорих",
                "Інклюзивна вбиральня",
                "Паркування для інвалідів",
                "Занижений бордюр",
                "Доступна каса",
                "Доступний вхід без сходів",
                "Спеціальні меблі",
                "Дублювання інформації жестовою мовою",
                "Розмітка на підлозі",
                "Антиковзаюче покриття",
                "Звукові оголошення",
                "Доступність громадського транспорту",
                "Широкі проходи для колясок",
                "Пандус в транспорті",
                "Інше"
            ];


            function clearPolylines() {
                routePolylines.forEach(p => p.setMap(null));
                routePolylines = [];
            }


            function updatePointsInfo() {
                document.getElementById('pointA-text').innerText = pointA ? `${pointA.lat().toFixed(5)}, ${pointA.lng().toFixed(5)}` : 'Не обрано';
                document.getElementById('pointB-text').innerText = pointB ? `${pointB.lat().toFixed(5)}, ${pointB.lng().toFixed(5)}` : 'Не обрано';
            }

            function resetRoute() {
                if (pointAMarker) pointAMarker.setMap(null);
                if (pointBMarker) pointBMarker.setMap(null);
                pointA = null;
                pointB = null;
                routeLocked = false;
                updatePointsInfo();
                clearPolylines();
                directionsRenderer.set('directions', null);
            }



            async function buildRoute(A, B) {
                const request = {
                    origin: A,
                    destination: B,
                    travelMode: google.maps.TravelMode.TRANSIT,
                    provideRouteAlternatives: true
                };

                directionsService.route(request, async (result, status) => {
                    if (status !== 'OK') {
                        alert("Не вдалося побудувати маршрут");
                        return;
                    }

                    clearPolylines();

                    const routes = result.routes.slice(0, 3);
                    routes.sort((a, b) => a.legs[0].duration.value - b.legs[0].duration.value);

                    const colors = ['#28a745', '#ffc107', '#dc3545'];
                    const stepsBlock = document.getElementById('routeSteps');
                    stepsBlock.innerHTML = "<b>Оберіть маршрут:</b><br>";

                    routes.forEach((route, index) => {
                        const leg = route.legs[0];
                        const duration = leg.duration.text;
                        const distance = leg.distance.text;
                        const transportLines = leg.steps
                            .filter(s => s.transit)
                            .map(s => s.transit.line.short_name);
                        const isInclusive = transportLines.every(whitelistTransport);
                        const color = colors[index];

                        const id = `route-option-${index}`;
                        stepsBlock.innerHTML += `
                            <div style="border-left: 5px solid ${color}; padding-left: 10px; margin-bottom: 8px;">
                                <p style="margin:0;">
                                    <strong>Маршрут ${index + 1}:</strong>
                                    ${duration} · ${distance} · ${transportLines.join(', ') || 'Пішки'}
                                    ${isInclusive ? ' <span style="color:green;">[Інклюзивний]</span>' : ''}
                                </p>
                                <button onclick="selectRoute(${index})">Обрати</button>
                            </div>
                        `;

                        const polyline = new google.maps.Polyline({
                            path: route.overview_path,
                            strokeColor: color,
                            strokeOpacity: 0.9,
                            strokeWeight: 5,
                            map: map
                        });
                        routePolylines.push(polyline);
                    });

                    window.allRoutesResult = result;
                    routeLocked = true;
                });
            }






            function selectRoute(index) {
                clearPolylines();

                const route = window.allRoutesResult.routes[index];

                const polyline = new google.maps.Polyline({
                    path: route.overview_path,
                    strokeColor: '#000000', // чорний для вибраного
                    strokeOpacity: 1,
                    strokeWeight: 6,
                    map: map
                });

                routePolylines.push(polyline);

                directionsRenderer.setDirections({
                    routes: [route]
                });

                const leg = route.legs[0];
                const stepsBlock = document.getElementById('routeSteps');
                stepsBlock.innerHTML = `<h4>Інструкції маршруту ${index + 1}</h4>`;

                leg.steps.forEach((step) => {
                    if (step.transit) {
                        stepsBlock.innerHTML += `
                            <p>🚏 Сісти на №<b>${step.transit.line.short_name}</b>
                            з <b>${step.transit.departure_stop.name}</b> до <b>${step.transit.arrival_stop.name}</b>
                            (${step.transit.line.vehicle.type})</p><hr>`;
                    } else {
                        stepsBlock.innerHTML += `
                            <p>🚶‍♂️ ${step.instructions.replace(/<[^>]*>?/gm, '')} (${step.distance.text})</p><hr>`;
                    }
                });
            }





            let currentTheme = localStorage.getItem('theme') || 'dark'; // За замовчуванням темна тема


            function whitelistTransport(routeNumber) {
                const inclusiveRoutes = ["1А","3А","5А","6А","8А","9","10","16","18","22","23","24",
                "25","27","30","31","32","33","38","29","40","46","47A","48","49A","52","53","61","84","92",
                ]; // Твій whitelist
                return inclusiveRoutes.includes(routeNumber);
            }



            async function initMap() {
                // Завантажуємо стиль карти в залежності від поточної теми
                const styleUrl = currentTheme === 'dark' 
                    ? '/styles/map-style-dark.json' 
                    : '/styles/map-style-light.json';
                const style = await fetch(styleUrl).then(res => res.json());
                getUserLocation();

                const center = { lat: 49.8397, lng: 24.0297 };
                map = new google.maps.Map(document.getElementById("map"), {
                    zoom: 12,
                    center,
                    styles: style,
                    disableDefaultUI: true,
                    zoomControl: false,
                    mapTypeControl: false,
                    streetViewControl: false,
                    fullscreenControl: false
                });

                directionsService = new google.maps.DirectionsService();
                directionsRenderer = new google.maps.DirectionsRenderer({ map: map });
                
                // Custom zoom controls
                document.querySelector('.zoom-in').addEventListener('click', () => {
                    map.setZoom(map.getZoom() + 1);
                });
                
                document.querySelector('.zoom-out').addEventListener('click', () => {
                    map.setZoom(map.getZoom() - 1);
                });
                

                
                // Add sample markers shown in the image
                addCustomMarker({ lat: 49.842, lng: 24.031 }, 'red'); // Opera marker
                addCustomMarker({ lat: 49.845, lng: 24.025 }, 'blue'); // Random blue marker
                addCustomMarker({ lat: 49.865, lng: 24.035 }, 'blue'); // SPARTAK
                addCustomMarker({ lat: 49.855, lng: 24.072 }, 'blue'); // Epicenter
                addCustomMarker({ lat: 49.835, lng: 24.015 }, 'blue'); // Skrynya
                addCustomMarker({ lat: 49.820, lng: 24.028 }, 'blue'); // Another blue marker
                addCustomMarker({ lat: 49.815, lng: 24.060 }, 'blue'); // Another blue marker
                addCustomMarker({ lat: 49.825, lng: 24.080 }, 'blue'); // Another blue marker
                addCustomMarker({ lat: 49.805, lng: 24.070 }, 'blue'); // Another blue marker
                addCustomMarker({ lat: 49.800, lng: 24.090 }, 'green'); // Arena Lviv

                const points = await (await fetch('/api/point')).json();
                points.forEach(addMarker);
                allPoints = points; // зберігаю всі поінти


                setupSearch();
                setupThemeToggle(); // Додаємо налаштування перемикача теми
                
                // Встановлюємо правильний клас для body при завантаженні
                document.body.classList.toggle('light-theme', currentTheme === 'light');

                map.addListener('click', (e) => {
                    if (routeLocked) return;

                    if (!pointA) {
                        pointA = e.latLng;
                        if (pointAMarker) pointAMarker.setMap(null);
                        pointAMarker = new google.maps.Marker({
                            position: pointA,
                            map: map,
                            label: "A",
                            animation: google.maps.Animation.DROP
                        });
                    } else if (!pointB) {
                        pointB = e.latLng;
                        if (pointBMarker) pointBMarker.setMap(null);
                        pointBMarker = new google.maps.Marker({
                            position: pointB,
                            map: map,
                            label: "B",
                            animation: google.maps.Animation.DROP
                        });
                        buildRoute(pointA, pointB);
                    }

                    updatePointsInfo();
                });


            }

            function addCustomMarker(position, type) {
                const iconUrl = type === 'red' ? 
                    'http://maps.google.com/mapfiles/ms/icons/red-dot.png' : 
                    type === 'blue' ? 
                        'http://maps.google.com/mapfiles/ms/icons/blue-dot.png' : 
                        'http://maps.google.com/mapfiles/ms/icons/green-dot.png';
                
                const marker = new google.maps.Marker({
                    position: position,
                    map: map,
                    icon: {
                        url: iconUrl,
                        scaledSize: new google.maps.Size(32, 32)
                    }
                });

                marker.addListener('click', () => {
                    if (routeLocked) return;
                    showPointInfo({
                        address: 'Адреса обраної точки',
                        description: 'Опис обраної точки',
                        loi: type === 'red' ? 3 : type === 'blue' ? 7 : 9,
                        categories: ['Категорія 1', 'Категорія 2'],
                        verified: true,
                        id: 'custom-' + Math.random().toString(36).substr(2, 9),
                        position: position
                    });

                    document.querySelector('.info-content').innerHTML += `
                    <button onclick='setPointA(${JSON.stringify(position)})'>Задати як точку A</button>
                    <button onclick='setPointB(${JSON.stringify(position)})'>Задати як точку B</button>
                `;
                });


            }

            function getColor(loi) {
                if (loi <= 3) return "http://maps.google.com/mapfiles/ms/icons/red-dot.png";
                if (loi <= 7) return "http://maps.google.com/mapfiles/ms/icons/blue-dot.png";
                return "http://maps.google.com/mapfiles/ms/icons/green-dot.png";
            }

            function addMarker(p) {
                const m = new google.maps.Marker({
                    position: { lat: p.latitude, lng: p.longitude },
                    map,
                    icon: {
                        url: getColor(p.loi),
                        scaledSize: new google.maps.Size(32, 32)
                    }
                });

                m.addListener('click', () => {
                    showPointInfo(p);

                    if (!routeLocked) {
                        document.querySelector('.info-content').innerHTML += `
                            <button onclick='setPointA({lat:${p.latitude}, lng:${p.longitude}})'>Задати як точку A</button>
                            <button onclick='setPointB({lat:${p.latitude}, lng:${p.longitude}})'>Задати як точку B</button>
                        `;
                    }
                });
            }


            async function showPointInfo(p) {
                document.querySelector('.info-content').innerHTML = `
                    <p class="info-item"><strong>${p.address || 'Назва місця, вулиці'}</strong></p>
                    <p class="info-item"><strong>LOI:</strong> ${p.loi}</p>
                    <p class="info-item"><strong>Категорії:</strong> ${(p.categories ?? []).join(', ') || '-'}</p>
                    <p class="info-item"><strong>Перевірено:</strong> ${p.verified ? 'Так' : 'Ні'}</p>

                                ${currentPosition && p.position ? `<button class="route-btn" onclick="setPointA(${JSON.stringify(p.position)})">Задати як точку A</button>
                                                                   <button class="route-btn" onclick="setPointB(${JSON.stringify(p.position)})">Задати як точку B</button>
            ` : ''}

                    ${currentPosition && p.latitude && p.longitude ? `<button class="route-btn" onclick="buildRoute({lat: ${p.latitude}, lng: ${p.longitude}})">Прокласти маршрут</button>` : ''}

                    ${userToken ? `<button class="save-point-btn" onclick="savePoint('${p.id}')">Зберегти точку</button>` : ''}

                    ${userToken ? `
                        <div class="review-form">
                          <textarea id="rev" placeholder="Відгук"></textarea>
                          <input id="rate" type="number" min="0" max="5" placeholder="Оцінка (0-5)" />
                          <button onclick="addReview('${p.id}')">Додати відгук</button>
                        </div>` : ''
                    }
                    <div class="route-instructions">
                        <h3>Маршрут:</h3>
                        <div id="routeSteps"></div>
                    </div>

                `;

                loadReviews(p.id);
            }


            async function loadReviews(pointId) {
                try {
                    const res = await fetch('/api/review/byPoint/' + pointId);
                    const rev = await res.json();
                    const rblock = document.getElementById('reviews');
                    rblock.innerHTML = "";
                    
                    if (rev.length == 0) {
                        // Add empty placeholders
                        rblock.innerHTML += `<div class="review-placeholder">Немає коментарів :(</div>`;
                    } else {
                        rev.forEach(r => {
                            rblock.innerHTML += `
                                <div class="review-item">
                                    <div class="review-rating">Оцінка: ${r.rating}</div>
                                    <div class="review-text">${r.reviewText}</div>
                                </div>`;
                        });
                    }
                } catch (error) {
                    // If there's an error, show placeholders
                    const rblock = document.getElementById('reviews');
                    rblock.innerHTML = "";
                    rblock.innerHTML += `<div class="review-placeholder">Немає коментарів :(</div>`;
                    
                }
            }

            async function addReview(pointId) {
                const body = {
                    pointId: pointId,
                    reviewText: document.getElementById('rev').value,
                    rating: +document.getElementById('rate').value
                };

                const res = await fetch('/api/review', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + userToken
                    },
                    body: JSON.stringify(body)
                });

                if (res.ok) {
                    alert('Відгук додано');
                    loadReviews(pointId);
                } else {
                    const err = await res.text();
                    alert('Помилка: ' + err);
                }
            }

            async function savePoint(id) {
                const res = await fetch('/api/user/savePoint/' + id, {
                    method: 'POST',
                    headers: { Authorization: 'Bearer ' + userToken }
                });
                if (res.ok) alert('Збережено'); else alert('Помилка');
            }

            function setPointA(position) {
                if (pointAMarker) pointAMarker.setMap(null);
                pointA = new google.maps.LatLng(position.lat, position.lng);
                pointAMarker = new google.maps.Marker({
                    position: pointA,
                    map: map,
                    label: "A",
                    animation: google.maps.Animation.DROP
                });
                updatePointsInfo();
                if (pointB) buildRoute(pointA, pointB);
            }

            function setPointB(position) {
                if (pointBMarker) pointBMarker.setMap(null);
                pointB = new google.maps.LatLng(position.lat, position.lng);
                pointBMarker = new google.maps.Marker({
                    position: pointB,
                    map: map,
                    label: "B",
                    animation: google.maps.Animation.DROP
                });
                updatePointsInfo();
                if (pointA) buildRoute(pointA, pointB);
            }

            function selectSearchPoint(lat, lng, p) {
                focusPoint(lat, lng);
                showPointInfo(p);

                const suggestions = document.getElementById('searchSuggestions');
                suggestions.style.display = 'none';
                suggestions.innerHTML = '';
            }


            function searchPoints(query) {
                const suggestions = document.getElementById('searchSuggestions');
                if (!query.trim()) {
                    suggestions.style.display = 'none';
                    suggestions.innerHTML = '';
                    return;
                }

                const found = allPoints.filter(p => p.address.toLowerCase().includes(query.toLowerCase()));

                if (found.length === 0) {
                    suggestions.style.display = 'none';
                    suggestions.innerHTML = '';
                    return;
                }

                suggestions.innerHTML = '';
                found.forEach(p => {
                    suggestions.innerHTML += `
                        <div style="padding:5px; cursor:pointer;" onclick='selectSearchPoint(${p.latitude}, ${p.longitude}, ${JSON.stringify(p)})'>${p.address}</div>
                    `;
                });
                suggestions.style.display = 'block';
            }





            function focusPoint(lat, lng) {
                map.setCenter({ lat, lng });
                map.setZoom(16);
            }



            function setupSearch() {

                const geocoder = new google.maps.Geocoder();

                document.getElementById('searchInput').addEventListener('input', e => {
                    searchPoints(e.target.value);
                });

                document.getElementById('searchInput').addEventListener('keydown', e => {
                    if (e.key === 'Enter') {
                        const query = e.target.value.toLowerCase();
                        const found = allPoints.find(p => p.address.toLowerCase() === query);
                        if (found) {
                            selectSearchPoint(found.latitude, found.longitude, found);
                        }
                    }
                });

            }
            
            // Функція для налаштування перемикача теми
            function setupThemeToggle() {
                const themeToggle = document.getElementById('themeToggle');
                const themeIcon = themeToggle.querySelector('i');
                
                // Встановлюємо правильну іконку при завантаженні
                updateThemeIcon(themeIcon);
                
                // Додаємо обробник подій для кнопки
                themeToggle.addEventListener('click', async () => {
                    // Змінюємо тему
                    currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
                    
                    // Зберігаємо вибір користувача
                    localStorage.setItem('theme', currentTheme);
                    
                    // Оновлюємо іконку
                    updateThemeIcon(themeIcon);
                    
                    // Оновлюємо стиль карти
                    await updateMapStyle();
                    
                    // Додатково можна змінити клас body для перемикання CSS-стилів інтерфейсу
                    document.body.classList.toggle('light-theme');
                });
            }

            // Функція для оновлення іконки теми
            function updateThemeIcon(iconElement) {
                if (currentTheme === 'dark') {
                    iconElement.className = 'bi bi-sun-fill'; // Показуємо сонце, щоб перейти на світлу тему
                } else {
                    iconElement.className = 'bi bi-moon-fill'; // Показуємо місяць, щоб перейти на темну тему
                }
            }

            // Функція для оновлення стилю карти
            async function updateMapStyle() {
                if (!map) return;
                
                const styleUrl = currentTheme === 'dark' 
                    ? '/styles/map-style-dark.json' 
                    : '/styles/map-style-light.json';
                
                try {
                    const style = await fetch(styleUrl).then(res => res.json());
                    map.setOptions({ styles: style });
                } catch (error) {
                    console.error('Помилка при завантаженні стилю карти:', error);
                }
            }
        </script>
        <script async defer src="https://maps.googleapis.com/maps/api/js?key=@Configuration["GoogleMaps:ApiKey"]&callback=initMap"></script>
    }
</body>
</html>